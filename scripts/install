#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC

### If it's a multi-instance app, meaning it can be installed several times independently
### The id of the app as stated in the manifest is available as $YNH_APP_ID
### The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
### The app instance name is available as $YNH_APP_INSTANCE_NAME
###    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
###    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
###    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
### The app instance name is probably what interests you most, since this is
### guaranteed to be unique. This is a good unique identifier to define installation path,
### db names, ...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

### If the app uses nginx as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uwsgi), the final path should be "/opt/yunohost/$app"
final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Check web path availability
ynh_webpath_available $domain $path_url
# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app is_public $is_public

#==============================================
# INSTALL DEPS
#==============================================
## Install MariaDB 10.1
ynh_package_install software-properties-common dirmngr mariadb-common mariadb-server mariadb-client

## Start mariadb
systemctl start mariadb
systemctl enable mariadb

ynh_install_php7

#=================================================
# CREATE A MYSQL DATABASE
#=================================================
# If your app uses a MySQL database, you can use these lines to bootstrap
# a database, an associated user and save the password in app settings

db_name=$(ynh_sanitize_dbid $app)
ynh_app_setting_set $app db_name $db_name
ynh_mysql_setup_db $db_name $db_name

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app


#=================================================
# PHP-FPM 7.2 CONFIGURATION
#=================================================

# Create a dedicated php-fpm7.1 config
ynh_add_fpm7.2_config

#=================================================
# SPECIFIC SETUP
#=================================================

# create a user
email=$(ynh_user_get_info $admin 'mail')

# setup application config
cp -a ../conf/.env.example $final_path/.env

#=================================================
# MODIFY A CONFIG FILE
#=================================================

#ynh_replace_string "random_key" "$random_key" "$final_path/.env"
ynh_replace_string "yunouser"   "$db_name"    "$final_path/.env"
ynh_replace_string "yunopass"   "$db_pwd"     "$final_path/.env"
ynh_replace_string "yunobase"   "$db_name"    "$final_path/.env"
ynh_replace_string "yunomail"   "$email"      "$final_path/.env"
ynh_replace_string "yunodomain" "$domain"     "$final_path/.env"

init_composer $final_path
( cd $final_path && sudo /usr/bin/php7.2 artisan config:clear )

db_name=$(ynh_sanitize_dbid $app)

# setup application config
(
cd $final_path && chmod -R 755 storage/* bootstrap/cache/
cd $final_path && chmod -R 755 storage/* bootstrap/cache/
cd $final_path && composer install --no-dev --optimize-autoloader
cd $final_path && /usr/bin/php7.2 artisan key:generate --force
cd $final_path && /usr/bin/php7.2 artisan p:environment:setup --author=pterodactyl@$domain --url=https://$domain$path_url --timezone=America/New_York --cache=redis --session=database --queue=redis --disable-settings-ui --redis-host=127.0.0.1 --redis-pass= --redis-port=6379
cd $final_path && /usr/bin/php7.2 artisan p:environment:database --host=127.0.0.1 --port=3306 --database=$db_name --username=$db_user --password=$db_pass
cd $final_path && /usr/bin/php7.2 artisan p:user:make --email=pterodactyl@$domain --admin=1
cd $final_path && /usr/bin/php7.2 artisan migrate --seed
cd $final_path && /usr/bin/php7.2 artisan p:user:make
cd $final_path && chown -R www-data:www-data *
)

cp -a ../conf/pteroq.service /etc/systemd/system/pteroq.service


#Cron
crontab -l > pterodactyl
echo "* * * * * php /var/www/pterodactyl/artisan schedule:run" >> pterodactyl
crontab pterodactyl
#crontab -l | { cat; echo "* * * * * php /var/www/pterodactyl/artisan schedule:run"; } | crontab -

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

### `ynh_store_file_checksum` is used to store the checksum of a file.
### That way, during the upgrade script, by using `ynh_backup_if_checksum_is_different`,
### you can make a backup of this file before modifying it again if the admin had modified it.

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$final_path/.env"


#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

### For security reason, any app should set the permissions to root: before anything else.
### Then, if write authorization is needed, any access should be given only to directories
### that really need such authorization.

# Set permissions to app files
chown -R $app: $final_path

#=================================================
# SETUP SSOWAT
#=================================================

# If app is public, add url to SSOWat conf as skipped_uris
if [ $is_public -eq 1 ]; then
  # unprotected_uris allows SSO credentials to be passed anyway.
  ynh_app_setting_set "$app" unprotected_uris "/"
fi

# Reload services
systemctl reload php7.2-fpm
systemctl reload nginx
sudo systemctl enable --now pteroq.service
# Set default php to php5 or php7.0
if [ "$(lsb_release --codename --short)" == "jessie" ]; then
	update-alternatives --set php /usr/bin/php5
else
    update-alternatives --set php /usr/bin/php7.0
fi
